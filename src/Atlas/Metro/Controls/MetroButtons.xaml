<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit">

	<Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
		<Setter Property="Foreground" Value="#999999" />
		<Setter Property="Background" Value="#222222" />
		<Setter Property="BorderBrush" Value="#616161" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Padding" Value="0,0,0,0" />
		<Setter Property="Height" Value="22" />
		<Setter Property="FontSize" Value="12" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid x:Name="Grid">
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" />
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							Margin="{TemplateBinding Padding}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
					</Grid>

					<ControlTemplate.Triggers>

						<!-- Defaulted Button -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="false" SourceName="Grid" />
								<Condition Property="IsPressed" Value="false" />
								<Condition Property="IsEnabled" Value="true" />
								<Condition Property="IsDefaulted" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" Value="{DynamicResource AssemblyAccentBrush}" TargetName="Border" />
						</MultiTrigger>

						<!-- Focused Button -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="false" SourceName="Grid" />
								<Condition Property="IsPressed" Value="false" />
								<Condition Property="IsEnabled" Value="true" />
								<Condition Property="IsDefaulted" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" Value="{DynamicResource AssemblyAccentBrush}" TargetName="Border" />
						</MultiTrigger>

						<!-- Mouse Over -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" SourceName="Grid" />
								<Condition Property="IsPressed" Value="false" />
								<Condition Property="IsEnabled" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="#393939" TargetName="Border" />
							<Setter Property="BorderBrush" Value="{DynamicResource AssemblyAccentBrushSecondary}" TargetName="Border" />
						</MultiTrigger>

						<!-- Mouse Pressed -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" SourceName="Grid" />
								<Condition Property="IsPressed" Value="true" />
								<Condition Property="IsEnabled" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="#333333" TargetName="Border" />
							<Setter Property="BorderBrush" Value="{DynamicResource AssemblyAccentBrushSecondary}" TargetName="Border" />
						</MultiTrigger>

						<!-- Disabled -->
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="#FF575757" TargetName="Border" />
							<Setter Property="BorderBrush" Value="#FF8B8B8B" TargetName="Border" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="MetroContainerListButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="Padding" Value="2" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid x:Name="Grid" Background="Transparent">
						<ContentPresenter x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  Margin="{TemplateBinding Padding}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"
										  TextElement.FontSize="20" TextElement.Foreground="{DynamicResource AssemblyAccentBrush}"
										  TextElement.FontFamily="{StaticResource MetroFontSemiLight}"/>
					</Grid>

					<ControlTemplate.Triggers>
						<!-- Mouse Over -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" SourceName="Grid" />
							</MultiTrigger.Conditions>
							<Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource AssemblyAccentBrushSecondary}" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type ToggleButton}" x:Key="ToggleTabChooser">
		<Setter Property="Foreground" Value="#999999" />
		<Setter Property="Background" Value="#222222" />
		<Setter Property="BorderBrush" Value="#616161" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Padding" Value="0,-2,0,0" />
		<Setter Property="Height" Value="22" />
		<Setter Property="FontSize" Value="12" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border>
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="20" />
								<ColumnDefinition Width="*" />
							</Grid.ColumnDefinitions>

							<Path x:Name="VectorIcon" Data="M 0,10 L 10,20 10,0 0,10" Fill="#FF9E9E9E" 
								RenderTransformOrigin="0.5,0.5" Margin="12,7.125,4.172,7.75" Stretch="Fill"
								Visibility="Collapsed">
								<Path.RenderTransform>
									<TransformGroup>
										<ScaleTransform />
										<SkewTransform />
										<RotateTransform Angle="180" />
										<TranslateTransform />
									</TransformGroup>
								</Path.RenderTransform>
							</Path>
							<ContentPresenter Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused" Value="true" />

						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="VectorIcon" Property="Visibility" Value="Visible" />
						</Trigger>

						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="#ADADAD" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type ToggleButton}">
		<Setter Property="Foreground" Value="#FF999999" />
		<Setter Property="Background" Value="#FF222222" />
		<Setter Property="BorderBrush" Value="#FF616161" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Padding" Value="0,0,0,0" />
		<Setter Property="Height" Value="22" />
		<Setter Property="FontSize" Value="12" />
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
						BorderThickness="{TemplateBinding BorderThickness}" 
						Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
						<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" 
							Content="{TemplateBinding Content}" 
							ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" 
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
							Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" 
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<!-- Checked Button -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsChecked" Value="true" />
								<Condition Property="IsEnabled" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="#393939" TargetName="border" />
						</MultiTrigger>

						<!-- Mouse Over -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" SourceName="border" />
								<Condition Property="IsPressed" Value="false" />
								<Condition Property="IsEnabled" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" Value="{DynamicResource AssemblyAccentBrushSecondary}" 
								TargetName="border" />
						</MultiTrigger>

						<!-- Mouse Pressed -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" SourceName="border" />
								<Condition Property="IsPressed" Value="true" />
								<Condition Property="IsEnabled" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="#333333" TargetName="border" />
							<Setter Property="BorderBrush" Value="{DynamicResource AssemblyAccentBrushSecondary}" 
								TargetName="border" />
						</MultiTrigger>

						<!-- Disabled -->
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="#FF575757" TargetName="border" />
							<Setter Property="BorderBrush" Value="#FF8B8B8B" TargetName="border" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="WindowActionButton" TargetType="{x:Type Button}">
		<Setter Property="Foreground" Value="{DynamicResource TextBrushPrimary}" />
		<Setter Property="FontFamily" Value="{DynamicResource MetroFontSemiBold}" />
		<Setter Property="FontSize" Value="12" />
		<Setter Property="FontWeight" Value="SemiBold" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Width" Value="34" />
		<Setter Property="Height" Value="26" />
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Margin" Value="0" />
		<Setter Property="Background" Value="{x:Null}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid x:Name="Grid">
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" />
						<ContentPresenter HorizontalAlignment="Center" Margin="-10" VerticalAlignment="Center" RecognizesAccessKey="True" />
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{DynamicResource WindowActionHoverBrush}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{DynamicResource AssemblyAccentBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="TabActiveButtons" TargetType="{x:Type Button}">
		<Setter Property="TextElement.Foreground" Value="{DynamicResource AssemblyAccentBrush}" />
		<Setter Property="FontFamily" Value="{DynamicResource MetroFontRegular}" />
		<Setter Property="FontSize" Value="12" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="Height" Value="20" />
		<Setter Property="Margin" Value="5,0,0,0" />
		<Setter Property="FontWeight" Value="SemiBold" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Background" Value="{x:Null}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid x:Name="Grid">
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" />
						<ContentPresenter x:Name="ContentPresenter" 
							HorizontalAlignment="Left" VerticalAlignment="Center" RecognizesAccessKey="True" />
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true" SourceName="Grid">
							<Setter Property="Foreground"
								Value="{DynamicResource AssemblyAccentBrushSecondary}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type xctk:DropDownButton}">
		<Setter Property="Foreground" Value="#999999" />
		<Setter Property="Background" Value="#222222" />
		<Setter Property="BorderBrush" Value="#616161" />
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Padding" Value="4,0"/>
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type xctk:DropDownButton}">
					<Grid x:Name="MainGrid" SnapsToDevicePixels="True">
						<ToggleButton x:Name="PART_DropDownButton" IsChecked="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
							<ToggleButton.IsHitTestVisible>
								<Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
									<Binding.Converter>
										<xctk:InverseBoolConverter/>
									</Binding.Converter>
								</Binding>
							</ToggleButton.IsHitTestVisible>
							<ToggleButton.Template>
								<ControlTemplate TargetType="{x:Type ToggleButton}">
									<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
								</ControlTemplate>
							</ToggleButton.Template>
							<Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
								<Grid>
									<xctk:ButtonChrome x:Name="ToggleButtonChrome" RenderEnabled="{TemplateBinding IsEnabled}"
													   Background="{TemplateBinding Background}" BorderThickness="0">
										<Grid>
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="*"/>
												<ColumnDefinition Width="1"/>
												<ColumnDefinition Width="Auto"/>
											</Grid.ColumnDefinitions>
											<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" 
															  Content="{TemplateBinding Content}" 
															  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
															  Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" 
															  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
											<Grid x:Name="ButtonChromeSeparator"  Background="#2d2d30" Grid.Column="1" />
											<Grid x:Name="arrowGlyph" Grid.Column="2" IsHitTestVisible="False" Margin="4,3">
												<Path x:Name="Arrow" Data="M 0,0 L 3,3 6,0 Z" Fill="#989898" Height="4" Width="7"/>
											</Grid>
										</Grid>
									</xctk:ButtonChrome>
								</Grid>
							</Border>
						</ToggleButton>
						<Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" HorizontalOffset="1" IsOpen="{Binding IsChecked, ElementName=PART_DropDownButton}" Placement="Bottom" StaysOpen="False" VerticalOffset="1">
							<Border BorderBrush="#333337" Background="#1b1b1c" BorderThickness="1">
								<ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding DropDownContent}"/>
							</Border>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource AssemblyAccentBrush}"/>
							<Setter Property="Background" TargetName="ToggleButtonChrome" Value="#333337"/>
							<Setter Property="BorderBrush" Value="{DynamicResource AssemblyAccentBrushSecondary}" TargetName="Border" />
						</Trigger>

						<Trigger Property="IsPressed" SourceName="PART_DropDownButton" Value="True">
							<Setter Property="Fill" TargetName="Arrow" Value="White"/>
							<Setter Property="Background" TargetName="ToggleButtonChrome" Value="#444"/>
							<Setter Property="Background" TargetName="ButtonChromeSeparator" Value="{DynamicResource AssemblyAccentBrushSecondary}"/>
						</Trigger>

						<Trigger Property="IsOpen" Value="True">
							<Setter Property="Fill" TargetName="Arrow" Value="White"/>
							<Setter Property="Background" TargetName="ToggleButtonChrome" Value="#444"/>
							<Setter Property="Background" TargetName="ButtonChromeSeparator" Value="{DynamicResource AssemblyAccentBrushSecondary}"/>
						</Trigger>

						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							<Setter Property="Foreground" TargetName="ToggleButtonChrome" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ToolbarDropDownButtonStyle" TargetType="{x:Type xctk:DropDownButton}">
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="3"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type xctk:DropDownButton}">
					<Grid x:Name="MainGrid" SnapsToDevicePixels="True">
						<ToggleButton x:Name="PART_DropDownButton" Grid.Column="1" IsChecked="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
							<ToggleButton.IsHitTestVisible>
								<Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
									<Binding.Converter>
										<xctk:InverseBoolConverter/>
									</Binding.Converter>
								</Binding>
							</ToggleButton.IsHitTestVisible>
							<ToggleButton.Template>
								<ControlTemplate TargetType="{x:Type ToggleButton}">
									<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
								</ControlTemplate>
							</ToggleButton.Template>
							<Grid>
								<xctk:ButtonChrome x:Name="ToggleButtonChrome" RenderEnabled="{TemplateBinding IsEnabled}"
												   Background="#333337" BorderThickness="0">
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="*"/>
											<ColumnDefinition Width="1"/>
											<ColumnDefinition Width="Auto"/>
										</Grid.ColumnDefinitions>
										<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
										<Grid x:Name="ButtonChromeSeparator"  Background="#2d2d30" Grid.Column="1" />
										<Grid x:Name="arrowGlyph" Grid.Column="2" IsHitTestVisible="False" Margin="4,3">
											<Path x:Name="Arrow" Data="M 0,0 L 3,3 6,0 Z" Fill="#989898" Height="4" Width="7"/>
										</Grid>
									</Grid>
								</xctk:ButtonChrome>
							</Grid>
						</ToggleButton>
						<Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" HorizontalOffset="1" IsOpen="{Binding IsChecked, ElementName=PART_DropDownButton}" Placement="Bottom" StaysOpen="False" VerticalOffset="1">
							<Border BorderBrush="#333337" Background="#1b1b1c" BorderThickness="1">
								<ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding DropDownContent}"/>
							</Border>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource AssemblyAccentBrush}"/>
							<Setter Property="Background" TargetName="ToggleButtonChrome" Value="#3e3e40"/>
						</Trigger>

						<Trigger Property="IsPressed" SourceName="PART_DropDownButton" Value="True">
							<Setter Property="Fill" TargetName="Arrow" Value="White"/>
							<Setter Property="Background" TargetName="ToggleButtonChrome" Value="{DynamicResource AssemblyAccentBrush}"/>
							<Setter Property="Background" TargetName="ButtonChromeSeparator" Value="{DynamicResource AssemblyAccentBrush}"/>
						</Trigger>

						<Trigger Property="IsOpen" Value="True">
							<Setter Property="Fill" TargetName="Arrow" Value="White"/>
							<Setter Property="Background" TargetName="ToggleButtonChrome" Value="{DynamicResource AssemblyAccentBrush}"/>
							<Setter Property="Background" TargetName="ButtonChromeSeparator" Value="{DynamicResource AssemblyAccentBrush}"/>
						</Trigger>

						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							<Setter Property="Foreground" TargetName="ToggleButtonChrome" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}">
		<Setter Property="Foreground" Value="White" />
		<Setter Property="Background" Value="{x:Null}" />
		<Setter Property="BorderBrush" Value="{x:Null}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Padding" Value="2,2" />
		<Setter Property="Margin" Value="2,0" />
		<Setter Property="Height" Value="22" />
		<Setter Property="FontSize" Value="12" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid x:Name="Grid" Background="Transparent">
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
													BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" />
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
													Margin="{TemplateBinding Padding}"
													VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
					</Grid>

					<ControlTemplate.Triggers>
						<!-- Mouse Over -->
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="#3e3e40" TargetName="Border" />
						</Trigger>

						<!-- Mouse Pressed, but not over -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsPressed" Value="True" />
								<Condition Property="IsMouseOver" Value="False" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="#3e3e40" TargetName="Border" />
						</MultiTrigger>

						<!-- Mouse Pressed -->
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Background" Value="{DynamicResource AssemblyAccentBrush}" TargetName="Border" />
						</Trigger>

						<!-- Disabled -->
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="#FF575757" TargetName="Border" />
							<Setter Property="BorderBrush" Value="#FF8B8B8B" TargetName="Border" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}"  TargetType="{x:Type ToggleButton}">
		<Setter Property="Foreground" Value="White" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="{x:Null}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Padding" Value="0,0,0,0" />
		<Setter Property="Height" Value="22" />
		<Setter Property="FontSize" Value="12" />
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" 
						BorderThickness="{TemplateBinding BorderThickness}" 
						Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
						<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" 
							Content="{TemplateBinding Content}" 
							ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" 
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
							Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" 
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<!-- Checked Button -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsChecked" Value="true" />
								<Condition Property="IsEnabled" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="#393939" TargetName="Border" />
						</MultiTrigger>

						<!-- Mouse Over -->
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="#3e3e40" TargetName="Border" />
						</Trigger>

						<!-- Mouse Pressed, but not over -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsPressed" Value="True" />
								<Condition Property="IsMouseOver" Value="False" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="#3e3e40" TargetName="Border" />
						</MultiTrigger>

						<!-- Mouse Pressed -->
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Background" Value="{DynamicResource AssemblyAccentBrush}" TargetName="Border" />
						</Trigger>

						<!-- Disabled -->
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="#FF575757" TargetName="Border" />
							<Setter Property="BorderBrush" Value="#FF8B8B8B" TargetName="Border" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>

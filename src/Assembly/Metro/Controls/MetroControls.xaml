<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:Vectors="clr-namespace:Assembly.Metro.Controls.Vectors"
					xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit">

	<!-- Metro Button -->
	<Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
		<Setter Property="Foreground" Value="#999999" />
		<Setter Property="Background" Value="#222222" />
		<Setter Property="BorderBrush" Value="#616161" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Padding" Value="0,0,0,0" />
		<Setter Property="Height" Value="22" />
		<Setter Property="FontSize" Value="12" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid x:Name="Grid">
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
						        BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" />
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
						                  Margin="{TemplateBinding Padding}"
						                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
					</Grid>

					<ControlTemplate.Triggers>

						<!-- Defaulted Button -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="false" SourceName="Grid" />
								<Condition Property="IsPressed" Value="false" />
								<Condition Property="IsEnabled" Value="true" />
								<Condition Property="IsDefaulted" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" Value="{DynamicResource ExtryzeAccentBrush}" TargetName="Border" />
						</MultiTrigger>

						<!-- Focused Button -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="false" SourceName="Grid" />
								<Condition Property="IsPressed" Value="false" />
								<Condition Property="IsEnabled" Value="true" />
								<Condition Property="IsDefaulted" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" Value="{DynamicResource ExtryzeAccentBrush}" TargetName="Border" />
						</MultiTrigger>

						<!-- Mouse Over -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" SourceName="Grid" />
								<Condition Property="IsPressed" Value="false" />
								<Condition Property="IsEnabled" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="#393939" TargetName="Border" />
							<Setter Property="BorderBrush" Value="{DynamicResource ExtryzeAccentBrushSecondary}" TargetName="Border" />
						</MultiTrigger>

						<!-- Mouse Pressed -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" SourceName="Grid" />
								<Condition Property="IsPressed" Value="true" />
								<Condition Property="IsEnabled" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="#333333" TargetName="Border" />
							<Setter Property="BorderBrush" Value="{DynamicResource ExtryzeAccentBrushSecondary}" TargetName="Border" />
						</MultiTrigger>

						<!-- Disabled -->
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="#FF575757" TargetName="Border" />
							<Setter Property="BorderBrush" Value="#FF8B8B8B" TargetName="Border" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Metro Sidebar Header Button -->
	<Style x:Key="SidebarHeaderButton" TargetType="{x:Type Button}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Foreground" Value="White" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Height" Value="60" />
		<Setter Property="Padding" Value="0,0,0,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid x:Name="Grid">
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
						        BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" />
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
						                  Margin="{TemplateBinding Padding}"
						                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
					</Grid>

					<ControlTemplate.Triggers>

						<!-- Mouse Over -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" SourceName="Grid" />
								<Condition Property="IsPressed" Value="false" />
								<Condition Property="IsEnabled" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="#3e3e40" TargetName="Border" />
						</MultiTrigger>

						<!-- Mouse Pressed -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" SourceName="Grid" />
								<Condition Property="IsPressed" Value="true" />
								<Condition Property="IsEnabled" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{DynamicResource ExtryzeAccentBrushSecondary}" TargetName="Border" />
						</MultiTrigger>

						<!-- Disabled -->
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="#161616" TargetName="Border" />
							<Setter Property="BorderBrush" Value="{DynamicResource ExtryzeAccentBrushSecondary}" TargetName="Border" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Metro Toggle Button -->
	<Style x:Key="PinButton" TargetType="{x:Type ToggleButton}">
		<Setter Property="Foreground" Value="{x:Null}" />
		<Setter Property="Background" Value="{x:Null}" />
		<Setter Property="BorderBrush" Value="{x:Null}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Padding" Value="-1,0,0,0" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid x:Name="Grid">
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
						        BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" />
						<Grid x:Name="Pin" RenderTransformOrigin="0.5,0.5" Margin="0,0,0,0" SnapsToDevicePixels="True">
							<Vectors:PinModule x:Name="PinVector" SnapsToDevicePixels="True" />
						</Grid>
						<Rectangle Opacity="0" Fill="White" />
					</Grid>

					<ControlTemplate.Triggers>
						<!-- Mouse Over -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" SourceName="Grid" />
								<Condition Property="IsPressed" Value="false" />
								<Condition Property="IsEnabled" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{DynamicResource ExtryzeAccentBrushSecondary}" TargetName="Border" />
						</MultiTrigger>

						<!-- Mouse Pressed -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" SourceName="Grid" />
								<Condition Property="IsPressed" Value="true" />
								<Condition Property="IsEnabled" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{DynamicResource ExtryzeAccentBrush}" />
							<Setter Property="Opacity" Value="0.7" />
						</MultiTrigger>

						<!-- Checked Third State -->
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="Pin" Property="RenderTransform">
								<Setter.Value>
									<TransformGroup>
										<ScaleTransform />
										<SkewTransform />
										<RotateTransform Angle="-90" />
										<TranslateTransform />
									</TransformGroup>
								</Setter.Value>
							</Setter>
						</Trigger>

						<!-- Disabled -->
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="#161616" TargetName="Border" />
							<Setter Property="BorderBrush" Value="{DynamicResource ExtryzeAccentBrushSecondary}" TargetName="Border" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Metro Sidebar Buttom -->
	<Style x:Key="SidebarButton" TargetType="{x:Type ToggleButton}">
		<Setter Property="Foreground" Value="White" />
		<Setter Property="Background" Value="{x:Null}" />
		<Setter Property="BorderBrush" Value="#FFA8A8A8" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Height" Value="50" />
		<Setter Property="FontSize" Value="25" />
		<Setter Property="FontFamily" Value="{DynamicResource MetroFontLight}" />
		<Setter Property="Padding" Value="-1,0,0,0" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid x:Name="Grid">
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
						        BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" />
						<Grid x:Name="Pin" RenderTransformOrigin="0.5,0.5" Margin="0,0,0,0" SnapsToDevicePixels="True">
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							                  Margin="{TemplateBinding Padding}"
							                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
						</Grid>
					</Grid>

					<ControlTemplate.Triggers>
						<!-- Mouse Over -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" SourceName="Grid" />
								<Condition Property="IsPressed" Value="false" />
								<Condition Property="IsEnabled" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{DynamicResource ExtryzeAccentBrushSecondary}" TargetName="Border" />
						</MultiTrigger>

						<!-- Mouse Pressed -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" SourceName="Grid" />
								<Condition Property="IsPressed" Value="true" />
								<Condition Property="IsEnabled" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{DynamicResource ExtryzeAccentBrush}" TargetName="Border" />
							<Setter Property="Opacity" Value="0.7" />
						</MultiTrigger>

						<!-- Checked Third State -->
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Background" Value="{DynamicResource ExtryzeAccentBrush}" TargetName="Border" />
							<Setter Property="Opacity" Value="1.0" />
						</Trigger>

						<!-- Disabled -->
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="#161616" TargetName="Border" />
							<Setter Property="BorderBrush" Value="{DynamicResource ExtryzeAccentBrushSecondary}" TargetName="Border" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!-- Metro Textbox -->
	<Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}">
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Height" Value="22" />
		<Setter Property="FontFamily" Value="{DynamicResource MetroFontRegular}" />
		<Setter Property="FontSize" Value="12" />
		<Setter Property="Background" Value="#414141" />
		<Setter Property="Padding" Value="0,0,0,0" />
		<Setter Property="Foreground" Value="White" />
		<Setter Property="SelectionBrush" Value="{DynamicResource ExtryzeAccentBrushSecondary}" />
		<Setter Property="BorderBrush" Value="#595959" />
		<Setter Property="ContextMenu">
			<Setter.Value>
				<ContextMenu>
					<MenuItem Header="Cut" Command="Cut"/>
					<MenuItem Header="Copy" Command="Copy"/>
					<MenuItem Header="Paste" Command="Paste"/>
				</ContextMenu>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)"
										                 Storyboard.TargetName="FocusRectangle" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity"
										                               Storyboard.TargetName="DisabledVisualElement">
											<SplineDoubleKeyFrame KeyTime="0" Value="1" />
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="ReadOnly">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity"
										                               Storyboard.TargetName="ReadOnlyVisualElement">
											<SplineDoubleKeyFrame KeyTime="0" Value="1" />
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Focused">
									<Storyboard>
										<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)"
										                 Storyboard.TargetName="FocusRectangle" />
										<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)"
										                 Storyboard.TargetName="FocusInnerRectangle" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unfocused">
									<Storyboard />
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="ValidationStates">
								<VisualState x:Name="Valid" />
								<VisualState x:Name="InvalidUnfocused">
									<Storyboard>
										<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)"
										                 Storyboard.TargetName="InvalidContentValidation" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="InvalidFocused">
									<Storyboard>
										<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)"
										                 Storyboard.TargetName="InvalidContentValidation" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Rectangle x:Name="Base" Stroke="{TemplateBinding BorderBrush}"
						           StrokeThickness="{TemplateBinding BorderThickness}" Opacity="1" Fill="{TemplateBinding Background}" />
						<Rectangle x:Name="FocusRectangle" StrokeThickness="{TemplateBinding BorderThickness}" Opacity="0"
						           Stroke="{x:Null}" />
						<Rectangle x:Name="FocusInnerRectangle" StrokeThickness="{TemplateBinding BorderThickness}" Opacity="0"
						           Margin="1" Stroke="{x:Null}" />
						<Rectangle x:Name="InvalidContentValidation" StrokeThickness="1" Opacity="0" Margin="1" Stroke="Red" />
						<Grid Margin="0,1,0,0">
							<Border x:Name="ReadOnlyVisualElement" Background="{x:Null}" Opacity="0" />
							<Grid>
								<ScrollViewer x:Name="PART_ContentHost" BorderThickness="0" IsTabStop="False" Margin="4,2,2,2"
								              VerticalAlignment="Stretch" Background="{x:Null}" />
							</Grid>
						</Grid>
						<Rectangle x:Name="DisabledVisualElement" Stroke="#FF999999" StrokeThickness="{TemplateBinding BorderThickness}"
						           Fill="#FF999999" IsHitTestVisible="False" Opacity="0" />
						<Border x:Name="ValidationErrorElement" BorderBrush="{x:Null}" BorderThickness="1" Visibility="Collapsed">
							<ToolTipService.ToolTip>
								<ToolTip x:Name="validationTooltip" DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}"
								         Placement="Right" PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
								         Template="{DynamicResource ValidationToolTipTemplate}">
									<ToolTip.Triggers>
										<EventTrigger RoutedEvent="FrameworkElement.Loaded">
											<BeginStoryboard>
												<Storyboard>
													<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="IsHitTestVisible"
													                               Storyboard.TargetName="validationTooltip">
														<DiscreteObjectKeyFrame KeyTime="0">
															<DiscreteObjectKeyFrame.Value>
																<System:Boolean>true</System:Boolean>
															</DiscreteObjectKeyFrame.Value>
														</DiscreteObjectKeyFrame>
													</ObjectAnimationUsingKeyFrames>
												</Storyboard>
											</BeginStoryboard>
										</EventTrigger>
									</ToolTip.Triggers>
								</ToolTip>
							</ToolTipService.ToolTip>
							<Grid Background="Transparent" HorizontalAlignment="Right" Height="12" Margin="1,-4,-4,0"
							      VerticalAlignment="Top" Width="12">
								<Path Data="M 1,0 L6,0 A 2,2 90 0 1 8,2 L8,7 z" Fill="White" Margin="1,3,0,0" />
								<Path Data="M 0,0 L2,0 L 8,6 L8,8" Fill="White" Margin="1,3,0,0" />
							</Grid>
						</Border>
					</Grid>

					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="false" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="#414141" />
						</MultiTrigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!-- Metro TextBlock -->
	<Style x:Key="GenericTextblock" TargetType="{x:Type TextBlock}">
		<Setter Property="Foreground" Value="#999999" />
		<Setter Property="FontFamily" Value="{DynamicResource MetroFontRegular}" />
		<Setter Property="FontSize" Value="12" />
	</Style>


	<!-- Metro Expander -->
	<Style x:Key="{x:Type Expander}" TargetType="{x:Type Expander}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Expander}">
					<Border BorderBrush="#292929" BorderThickness="2" Background="#FF252525" CornerRadius="3" SnapsToDevicePixels="True">
						<DockPanel>
							<ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" FontSize="12" FontFamily="{DynamicResource MetroFontRegular}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
								<ToggleButton.FocusVisualStyle>
									<Style>
										<Setter Property="Control.Template">
											<Setter.Value>
												<ControlTemplate>
													<Border>
														<Rectangle Margin="0" SnapsToDevicePixels="True" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
													</Border>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
								</ToggleButton.FocusVisualStyle>
								<ToggleButton.Style>
									<Style TargetType="{x:Type ToggleButton}">
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type ToggleButton}">
													<Border Padding="{TemplateBinding Padding}">
														<Grid Background="Transparent" SnapsToDevicePixels="False">
															<Grid.ColumnDefinitions>
																<ColumnDefinition Width="19"/>
																<ColumnDefinition Width="*"/>
															</Grid.ColumnDefinitions>
															<Ellipse x:Name="circle" Fill="Transparent" HorizontalAlignment="Center" Height="19" Stroke="DarkGray" VerticalAlignment="Center" Width="19"/>
															<Path x:Name="arrow" Data="M 4.5 0 L 4.5 9 M 0 4.5 L 9 4.5" HorizontalAlignment="Center" SnapsToDevicePixels="False" Stroke="#FF666666" StrokeThickness="2" VerticalAlignment="Center"/>
															<ContentPresenter x:Name="label" ContentTemplate="{TemplateBinding ContentTemplate}" TextBlock.Foreground="#999999" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center" OpacityMask="#FFF90D0D"/>
														</Grid>
													</Border>
													<ControlTemplate.Triggers>
														<Trigger Property="IsChecked" Value="True">
															<Setter Property="Data" TargetName="arrow" Value="M 0 1.5 L 9 1.5"/>
														</Trigger>
														<Trigger Property="IsMouseOver" Value="True">
															<Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ExtryzeAccentBrush}"/>
															<Setter Property="Fill" TargetName="circle" Value="Transparent"/>
															<Setter Property="Stroke" TargetName="arrow" Value="#FF666666"/>
														</Trigger>
														<Trigger Property="IsPressed" Value="True">
															<Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ExtryzeAccentBrushSecondary}"/>
															<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
															<Setter Property="Fill" TargetName="circle" Value="Transparent"/>
															<Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ExtryzeAccentBrushSecondary}"/>
														</Trigger>
														<Trigger Property="IsEnabled" Value="False">
															<Setter Property="Stroke" TargetName="circle" Value="#FF666666"/>
															<Setter Property="Fill" TargetName="circle" Value="Transparent"/>
															<Setter Property="Stroke" TargetName="arrow" Value="#FF666666"/>
															<Setter Property="TextBlock.Foreground" TargetName="label" Value="#FF666666" />
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
								</ToggleButton.Style>
							</ToggleButton>
							<ContentPresenter x:Name="ExpandSite" Content="{TemplateBinding Content}" DockPanel.Dock="Bottom" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</DockPanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded" Value="True">
							<Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
						</Trigger>
						<Trigger Property="ExpandDirection" Value="Right">
							<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
						</Trigger>
						<Trigger Property="ExpandDirection" Value="Up">
							<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
						</Trigger>
						<Trigger Property="ExpandDirection" Value="Left">
							<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Foreground" Value="#999999" />
		<Setter Property="FontFamily" Value="{DynamicResource MetroFontRegular}" />
		<Setter Property="Background" Value="#FF252525" />
		<Setter Property="BorderBrush" Value="#292929" />
		<Setter Property="BorderThickness" Value="2" />
		<Setter Property="FontSize" Value="12" />
	</Style>

	<Style x:Key="{x:Type avalonEdit:SearchPanel}" TargetType="{x:Type avalonEdit:SearchPanel}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type avalonEdit:SearchPanel}">
					<Border BorderBrush="#434346" Background="#FF303032" BorderThickness="1" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="Arrow">
						<StackPanel Orientation="Horizontal" Margin="4">
							<TextBox Name="PART_searchTextBox" Focusable="True" Width="150" >
								<TextBox.Text>
									<Binding Path="SearchPattern" RelativeSource="{RelativeSource TemplatedParent}" UpdateSourceTrigger="PropertyChanged">
										<Binding.ValidationRules>
											<ExceptionValidationRule />
										</Binding.ValidationRules>
									</Binding>
								</TextBox.Text>
							</TextBox>

							<ToggleButton x:Name="btnOptions" IsChecked="False" Style="{DynamicResource OptionsToggleButton}" Margin="2,0,0,0">
								<Grid>
									<Path x:Name="Arrow" Data="M0,0L4,4 8,0z" Margin="4,0,4,0" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="#989898" Width="8"/>
								</Grid>
							</ToggleButton>

							<Popup x:Name="popOptions" IsOpen="{Binding IsChecked, ElementName=btnOptions}" PlacementTarget="{x:Reference btnOptions}" StaysOpen="False" >
								<Border BorderThickness="1" Background="#1b1b1c" BorderBrush="#333337">
									<StackPanel>
										<MenuItem IsCheckable="True" IsChecked="{Binding MatchCase, RelativeSource={RelativeSource TemplatedParent}}" Header="{Binding Localization.MatchCaseText, RelativeSource={RelativeSource TemplatedParent}}" Foreground="White" FontFamily="{DynamicResource MetroFontSemiLight}" FontSize="12" />
										<MenuItem IsCheckable="True" IsChecked="{Binding WholeWords, RelativeSource={RelativeSource TemplatedParent}}" Header="{Binding Localization.MatchWholeWordsText, RelativeSource={RelativeSource TemplatedParent}}" Foreground="White" FontFamily="{DynamicResource MetroFontSemiLight}" FontSize="12" />
										<MenuItem IsCheckable="True" IsChecked="{Binding UseRegex, RelativeSource={RelativeSource TemplatedParent}}" Header="{Binding Localization.UseRegexText, RelativeSource={RelativeSource TemplatedParent}}" Foreground="White" FontFamily="{DynamicResource MetroFontSemiLight}" FontSize="12" />
									</StackPanel>
								</Border>
							</Popup>

							<Button Margin="4,0,0,0"  Width="22" Command="avalonEdit:SearchCommands.FindPrevious" ToolTip="{Binding Localization.FindPreviousText, RelativeSource={RelativeSource TemplatedParent}}"
									Content="&lt;"/>
							<Button Margin="2,0,0,0"  Width="22" Command="avalonEdit:SearchCommands.FindNext" ToolTip="{Binding Localization.FindNextText, RelativeSource={RelativeSource TemplatedParent}}"
									Content="&gt;"/>
							<Button Margin="4,0,0,0" Padding="0,0,0,2" Height="16" Width="16" Content="x" Focusable="False" VerticalAlignment="Top" VerticalContentAlignment="Center"
											HorizontalAlignment="Right" Command="avalonEdit:SearchCommands.CloseSearchPanel" />
						</StackPanel>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>